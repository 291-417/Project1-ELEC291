0000              1   ; This example uses a technique called "decimation" with the 8-bit ADC
0000              2   ; to increase its efective resolution to 12-bits.  The output of a LM335
0000              3   ; tempererature sensor is read and then diplayed using PUTTy in degrees Celcius.
0000              4   ;
0000              5   ; Some good information about decimation found here:
0000              6   ;
0000              7   ; https://www.cypress.com/file/236481/download
0000              8   
                 10   $LIST
0000             12   
0000             13   XTAL EQU 7373000
0000             14   BAUD EQU 115200
0000             15   BRVAL EQU ((XTAL/BAUD)-16)
0000             16   
0000             17            CSEG at 0x0000
0000 020369      18            ljmp    MainProgram
0003             19   
0030             20   DSEG at 0x30
0030             21   x:   ds 4
0034             22   y:   ds 4
0038             23   bcd: ds 5
003D             24   
0000             25   BSEG
0000             26   mf: dbit 1
0001             27   
                546   $LIST
                 29   $LIST
0273             31   
0273             32   putchar:
0273 109902      33            jbc     TI,putchar_L1
0276 80FB        34            sjmp putchar
0278             35   putchar_L1:
0278 F599        36            mov     SBUF,a
027A 22          37            ret
027B             38            
027B             39   getchar:
027B 109802      40            jbc     RI,getchar_L1
027E 80FB        41            sjmp getchar
0280             42   getchar_L1:
0280 E599        43            mov     a,SBUF
0282 22          44            ret
0283             45   
0283             46   Wait1S:
0283 7A28        47            mov R2, #40
0285 79FA        48   L3:      mov R1, #250
0287 78B8        49   L2:      mov R0, #184
0289 D8FE        50   L1:      djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
028B D9FA        51            djnz R1, L2 ; 100us*250=0.025s
028D DAF6        52            djnz R2, L3 ; 0.025s*40=1s
028F 22          53            ret
0290             54   
0290             55   InitSerialPort:
0290 75BD00      56            mov     BRGCON,#0x00
0293 75BF00      57            mov     BRGR1,#high(BRVAL)
0296 75BE30      58            mov     BRGR0,#low(BRVAL)
0299 75BD03      59            mov     BRGCON,#0x03 ; Turn-on the baud rate generator
029C 759852      60            mov     SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
029F 759100      61            mov     P1M1,#0x00 ; Enable pins RxD and TXD
02A2 759200      62            mov     P1M2,#0x00 ; Enable pins RxD and TXD
02A5 22          63            ret
02A6             64   
02A6             65   InitADC:
02A6             66            ; ADC0_0 is connected to P1.7
02A6             67            ; ADC0_1 is connected to P0.0
02A6             68            ; ADC0_2 is connected to P2.1
02A6             69            ; ADC0_3 is connected to P2.0
02A6             70       ; Configure pins P1.7, P0.0, P2.1, and P2.0 as inputs
02A6 438401      71       orl P0M1, #00000001b
02A9 5385FE      72       anl P0M2, #11111110b
02AC 439180      73       orl P1M1, #10000000b
02AF 53927F      74       anl P1M2, #01111111b
02B2 43A403      75       orl P2M1, #00000011b
02B5 53A5FC      76       anl P2M2, #11111100b
02B8             77            ; Setup ADC0
02B8 D2C2        78            setb BURST0 ; Autoscan continuos conversion mode
02BA 75A120      79            mov     ADMODB,#0x20 ;ADC0 clock is 7.3728MHz/2
02BD 75A30F      80            mov     ADINS,#0x0F ; Select the four channels of ADC0 for conversion
02C0 758E05      81            mov     ADCON0,#0x05 ; Enable the converter and start immediately
02C3             82            ; Wait for first conversion to complete
02C3             83   InitADC_L1:
02C3 E58E        84            mov     a,ADCON0
02C5 30E3FB      85            jnb     acc.3,InitADC_L1
02C8 22          86            ret
02C9             87   
02C9 30313233    88   HexAscii: db '0123456789ABCDEF'
     34353637
     38394142
     43444546
02D9             89   
02D9             90   SendTemp:
02D9 9002C9      91            mov dptr, #HexAscii 
02DC             92            
02DC E539        93            mov a, bcd+1
02DE C4          94            swap a
02DF 540F        95            anl a, #0xf
02E1 93          96            movc a, @a+dptr
02E2 120273      97            lcall putchar
02E5 E539        98            mov a, bcd+1
02E7 540F        99            anl a, #0xf
02E9 93         100            movc a, @a+dptr
02EA 120273     101            lcall putchar
02ED            102   
02ED 742E       103            mov a, #'.'
02EF 120273     104            lcall putchar
02F2            105   
02F2 E538       106            mov a, bcd+0
02F4 C4         107            swap a
02F5 540F       108            anl a, #0xf
02F7 93         109            movc a, @a+dptr
02F8 120273     110            lcall putchar
02FB E538       111            mov a, bcd+0
02FD 540F       112            anl a, #0xf
02FF 93         113            movc a, @a+dptr
0300 120273     114            lcall putchar
0303            115            
0303 740D       116            mov a, #'\r'
0305 120273     117            lcall putchar
0308 740A       118            mov a, #'\n'
030A 120273     119            lcall putchar   
030D 22         120            ret
030E            121            
030E            122   SendString:
030E E4         123       clr a
030F 93         124       movc a, @a+dptr
0310 6006       125       jz SendString_L1
0312 120273     126       lcall putchar
0315 A3         127       inc dptr
0316 80F6       128       sjmp SendString  
0318            129   SendString_L1:
0318 22         130            ret
0319            131   
0319            132   SendHex:
0319 7430       133            mov a, #'0'
031B 120273     134            lcall putchar
031E 7478       135            mov a, #'x'
0320 120273     136            lcall putchar
0323 9002C9     137            mov dptr, #HexAscii 
0326 E5F0       138            mov a, b
0328 C4         139            swap a
0329 540F       140            anl a, #0xf
032B 93         141            movc a, @a+dptr
032C 120273     142            lcall putchar
032F E5F0       143            mov a, b
0331 540F       144            anl a, #0xf
0333 93         145            movc a, @a+dptr
0334 120273     146            lcall putchar
0337 7420       147            mov a, #' '
0339 120273     148            lcall putchar
033C 22         149            ret
033D            150   Wait10us:
033D 7812       151       mov R0, #18
033F D8FE       152       djnz R0, $ ; 2 machine cycles-> 2*0.27126us*18=10us
0341 22         153            ret
0342            154   
0342 0D0A5038   155   InitialMessage: db '\r\nP89LPC9351 ADC decimation example.\r\n', 0
     394C5043
     39333531
     20414443
     20646563
     696D6174
     696F6E20
     6578616D
     706C652E
     0D0A00
0369            156            
0369            157   MainProgram:
0369 75817F     158       mov SP, #0x7F
036C 120290     159            lcall InitSerialPort
036F 1202A6     160            lcall InitADC
0372            161   
0372 120283     162            lcall Wait1S ; Wait a bit so PUTTy has a chance to start
0375 900342     163            mov dptr, #InitialMessage
0378 12030E     164            lcall SendString
037B            165   
037B            166   forever_loop:
037B            167            ; Take 256 (4^4) consecutive measurements of ADC0 channel 0 at about 10 us intervals and accumulate in x
037B 753000     168            mov x+0, #low (0 % 0x10000) 
037E 753100     168            mov x+1, #high(0 % 0x10000) 
0381 753200     168            mov x+2, #low (0 / 0x10000) 
0384 753300     168            mov x+3, #high(0 / 0x10000) 
0387 85C530     169       mov x+0, AD0DAT0
038A 7FFF       170            mov R7, #255
038C 12033D     171       lcall Wait10us
038F            172   accumulate_loop:
038F 85C534     173       mov y+0, AD0DAT0
0392 753500     174       mov y+1, #0
0395 753600     175       mov y+2, #0
0398 753700     176       mov y+3, #0
039B 1200C8     177       lcall add32
039E 12033D     178       lcall Wait10us
03A1 DFEC       179            djnz R7, accumulate_loop
03A3            180            
03A3            181            ; Now divide by 16 (2^4)
03A3 753410     182            mov y+0, #low (16 % 0x10000) 
03A6 753500     182            mov y+1, #high(16 % 0x10000) 
03A9 753600     182            mov y+2, #low (16 / 0x10000) 
03AC 753700     182            mov y+3, #high(16 / 0x10000) 
03AF 12020A     183            lcall div32
03B2            184            ; x has now the 12-bit representation of the temperature
03B2            185            
03B2            186            ; Convert to temperature (C)
03B2 7534E8     187            mov y+0, #low (33000 % 0x10000) 
03B5 753580     187            mov y+1, #high(33000 % 0x10000) 
03B8 753600     187            mov y+2, #low (33000 / 0x10000) 
03BB 753700     187            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
03BE 12017D     188            lcall mul32
03C1 7534FF     189            mov y+0, #low (((1<<12)-1) % 0x10000) 
03C4 75350F     189            mov y+1, #high(((1<<12)-1) % 0x10000) 
03C7 753600     189            mov y+2, #low (((1<<12)-1) / 0x10000) 
03CA 753700     189            mov y+3, #high(((1<<12)-1) / 0x10000)  ; 2^12-1
03CD 12020A     190            lcall div32
03D0 7534A4     191            mov y+0, #low (27300 % 0x10000) 
03D3 75356A     191            mov y+1, #high(27300 % 0x10000) 
03D6 753600     191            mov y+2, #low (27300 / 0x10000) 
03D9 753700     191            mov y+3, #high(27300 / 0x10000) 
03DC 1200E9     192            lcall sub32
03DF            193            
03DF 120003     194            lcall hex2bcd
03E2            195            
03E2 85C5F0     196            mov     b, AD0DAT0
03E5 120319     197            lcall SendHex
03E8            198            
03E8 1202D9     199            lcall SendTemp ; Send to PUTTy, with 2 decimal digits to show that it actually works
03EB 120283     200            lcall Wait1S
03EE            201   
03EE 808B       202            sjmp forever_loop
03F0            203   end
