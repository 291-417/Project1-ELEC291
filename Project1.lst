0000              1   ; Project 1: Reflow oven controller
0000              2   ; ELEC 291 UBC
0000              3   ; Oakley Bach-Raabe, Jashan Brar, Trevor MacKay, Ryan Meshulam, Anusika Nijher
0000              4   ; Includes modified code from Jesus Calvino-Fraga
0000              5   ; GPL v3
                  7   $LIST
0000              9   
0000             10   CLK         EQU 14746000  ; Microcontroller system clock frequency in Hz
0000             11   CCU_RATE    EQU 22050     ; 22050Hz is the sampling rate of the wav file we are playing
0000             12   CCU_RELOAD  EQU ((65536-((CLK/(2*CCU_RATE)))))
0000             13   BAUD        EQU 115200
0000             14   BRVAL       EQU ((CLK/BAUD)-16)
0000             15   XTAL        EQU 7373000
0000             16   
0000             17   LCD_RS equ P0.5
0000             18   LCD_RW equ P0.6
0000             19   LCD_E  equ P0.7
0000             20   LCD_D4 equ P1.2
0000             21   LCD_D5 equ P1.3
0000             22   LCD_D6 equ P1.4
0000             23   LCD_D7 equ P1.6
0000             24   DIP_BUTTON1 equ P3.0
0000             25   PLAY_BUTTON equ P0.3
0000             26   SOUND equ P2.7
0000             27   
0000             28   FLASH_CE    EQU P2.4
0000             29   
0030             30   dseg at 30H
0030             31            w:   ds 3 ; 24-bit play counter.  Decremented in CCU ISR.
0033             32     x:   ds 4
0037             33     y:   ds 4
003B             34     bcd: ds 5
0040             35     sound_start: ds 3
0043             36    
0000             37   bseg
0000             38   
0000             39   mf: dbit 1
0001             40   PB0: dbit 1 ; Variable to store the state of pushbutton 0 after calling ADC_to_PB below
0002             41   PB1: dbit 1 ; Variable to store the state of pushbutton 1 after calling ADC_to_PB below
0003             42   PB2: dbit 1 ; Variable to store the state of pushbutton 2 after calling ADC_to_PB below
0004             43   PB3: dbit 1 ; Variable to store the state of pushbutton 3 after calling ADC_to_PB below
0005             44   PB4: dbit 1 ; Variable to store the state of pushbutton 4 after calling ADC_to_PB below
0006             45   PB5: dbit 1 ; Variable to store the state of pushbutton 5 after calling ADC_to_PB below
0007             46   PB6: dbit 1 ; Variable to store the state of pushbutton 6 after calling ADC_to_PB below
0008             47   
0000             48   cseg
0000             49   
0000             50   org 0x0000 ; Reset vector
0000 020A63      51       ljmp MainProgram
0003             52   
0003             53   org 0x0003 ; External interrupt 0 vector (not used in this code)
0003 32          54            reti
0004             55   
000B             56   org 0x000B ; Timer/Counter 0 overflow interrupt vector (not used in this code)
000B 32          57            reti
000C             58   
0013             59   org 0x0013 ; External interrupt 1 vector (not used in this code)
0013 32          60            reti
0014             61   
001B             62   org 0x001B ; Timer/Counter 1 overflow interrupt vector (not used in this code
001B 32          63            reti
001C             64   
0023             65   org 0x0023 ; Serial port receive/transmit interrupt vector (not used in this code)
0023 32          66            reti
0024             67   
005B             68   org 0x005b ; CCU interrupt vector.  Used in this code to replay the wave file.
005B 0204D1      69            ljmp CCU_ISR
005E             70   
005E             71   
005E             72   
                546   $LIST
                 77   $LIST
0A23             79   
0A23             80   ;---------------------------------;
0A23             81   ; Initial configuration of ports. ;
0A23             82   ; After reset the default for the ;
0A23             83   ; pins is 'Open Drain'.  This     ;
0A23             84   ; routine changes them pins to    ;
0A23             85   ; Quasi-bidirectional like in the ;
0A23             86   ; original 8051.                  ;
0A23             87   ; Notice that P1.2 and P1.3 are   ;
0A23             88   ; always 'Open Drain'. If those   ;
0A23             89   ; pins are to be used as output   ;
0A23             90   ; they need a pull-up resistor.   ;
0A23             91   ;---------------------------------;
0A23             92   Ports_Init:
0A23             93       ; Configure all the ports in bidirectional mode:
0A23 758400      94       mov P0M1, #00H
0A26 758500      95       mov P0M2, #00H
0A29 759100      96       mov P1M1, #00H
0A2C 759200      97       mov P1M2, #00H ; WARNING: P1.2 and P1.3 need 1 kohm pull-up resistors if used as outputs!
0A2F 75A400      98       mov P2M1, #00H
0A32 75A500      99       mov P2M2, #00H
0A35 75B100     100       mov P3M1, #00H
0A38 75B200     101       mov P3M2, #00H
0A3B 22         102            ret
0A3C            103   
0A3C            104   ; Display a 3-digit BCD number in the LCD
0A3C            105   LCD_3BCD:
0A3C E53C       106            mov a, bcd+1
0A3E 540F       107            anl a, #0x0f
0A40 4430       108            orl a, #'0'
0A42 12031C     109            lcall ?WriteData
0A45 E53B       110            mov a, bcd+0
0A47 C4         111            swap a
0A48 540F       112            anl a, #0x0f
0A4A 4430       113            orl a, #'0'
0A4C 12031C     114            lcall ?WriteData
0A4F E53B       115            mov a, bcd+0
0A51 540F       116            anl a, #0x0f
0A53 4430       117            orl a, #'0'
0A55 12031C     118            lcall ?WriteData
0A58 22         119            ret
0A59            120   
0A59            121   Sound_Start_Init:
0A59 7540FF     122     mov sound_start+0, #0xff
0A5C 754100     123     mov sound_start+1, #0x00
0A5F 754200     124     mov sound_start+2, #0x00
0A62 22         125     ret
0A63            126   
0A63            127   MainProgram:
0A63 75817F     128     mov SP, #0x7F
0A66            129     
0A66 120A59     130     lcall Sound_Start_Init
0A69 120A23     131     lcall Ports_Init ; Default all pins as bidirectional I/O. See Table 42.
0A6C 120514     132     lcall Double_Clk
0A6F 120504     133     lcall InitDAC ; Call after 'Ports_Init
0A72            134            
0A72 1204BA     135     lcall CCU_Init
0A75 12051C     136     lcall Init_SPI
0A78            137     
0A78 120776     138     lcall InitSerialPort
0A7B 12078C     139     lcall InitADC0
0A7E 120326     140     lcall LCD_4BIT
0A81            141   
0A81            142     ; Set beginning message on LCD
0A81 C0E0       143            push acc
0A83 7401       143            mov a, #1
0A85 14         143            dec a
0A86 120368     143            lcall ?Set_Cursor_1 ; Select column and row
0A89 D0E0       143            pop acc
0A8B C083       144            push dph
0A8D C082       144            push dpl
0A8F C0E0       144            push acc
0A91 900878     144            mov dptr, #Title
0A94 12035B     144            lcall ?Send_Constant_String
0A97 D0E0       144            pop acc
0A99 D082       144            pop dpl
0A9B D083       144            pop dph
0A9D            145   
0A9D 120769     146     lcall Wait1S ; Wait a bit so PUTTy has a chance to start
0AA0            147   
0AA0 90088A     148     mov dptr, #InitialMessage
0AA3 120818     149            lcall SendString
0AA6            150   
0AA6 C2A7       151     clr SOUND ; Disable speaker
0AA8 C2C8       152     clr TMOD20 ; Stop CCU timer
0AAA D2AF       153            setb EA ; Enable global interrupts.
0AAC            154   
0AAC            155   forever:
0AAC 9008F0     156     mov dptr, #Temp
0AAF 120818     157            lcall SendString
0AB2 120912     158     lcall Read_Temperature
0AB5 9008D8     159     mov dptr, #Thermocouple
0AB8 120818     160            lcall SendString
0ABB 1209C7     161     lcall Get_Thermocouple
0ABE 120823     162     lcall ADC_to_PB
0AC1 120769     163            lcall Wait1S
0AC4 20B036     164            jb DIP_BUTTON1, next
0AC7 C002       165            push AR2
0AC9 7A32       165            mov R2, #50
0ACB 1202D7     165            lcall ?Wait_Milli_Seconds
0ACE D002       165            pop AR2         
0AD0 20B02A     166            jb DIP_BUTTON1, next
0AD3 12097D     167            lcall Display_PushButtons_ADC
0AD6            168   next_check:
0AD6 2083D3     169     jb PLAY_BUTTON, forever
0AD9            170     ;Wait_Milli_Seconds(#50)
0AD9 2083D0     171     jb PLAY_BUTTON, forever
0ADC 3083FD     172     jnb PLAY_BUTTON, $
0ADF            173   
0ADF 7401       174     mov a, #1
0AE1 12042E     175     lcall Play_Character
0AE4 C002       176            push AR2
0AE6 7AFF       176            mov R2, #255
0AE8 1202D7     176            lcall ?Wait_Milli_Seconds
0AEB D002       176            pop AR2
0AED 7402       177     mov a, #2
0AEF C002       178            push AR2
0AF1 7AFF       178            mov R2, #255
0AF3 1202D7     178            lcall ?Wait_Milli_Seconds
0AF6 D002       178            pop AR2
0AF8 7403       179     mov a, #3
0AFA 020AAC     180     ljmp forever
0AFD            181   
0AFD            182   
0AFD            183   next:
0AFD C0E0       184            push acc
0AFF 7401       184            mov a, #1
0B01 14         184            dec a
0B02 120366     184            lcall ?Set_Cursor_2 ; Select column and row
0B05 D0E0       184            pop acc
0B07 C083       185            push dph
0B09 C082       185            push dpl
0B0B C0E0       185            push acc
0B0D 900900     185            mov dptr, #blank
0B10 12035B     185            lcall ?Send_Constant_String
0B13 D0E0       185            pop acc
0B15 D082       185            pop dpl
0B17 D083       185            pop dph
0B19 020AD6     186       ljmp next_check
0B1C            187   en
