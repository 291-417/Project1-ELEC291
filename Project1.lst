0000              1   ; Project 1: Reflow oven controller
0000              2   ; ELEC 291 UBC
0000              3   ; Oakley Bach-Raabe, Jashan Brar, Trevor MacKay, Ryan Meshulam, Anusika Nijher
0000              4   ; Includes modified code from Jesus Calvino-Fraga
0000              5   ; GPL v3
                  7   $LIST
0000              9   
0000             10   CLK         EQU 14746000  ; Microcontroller system clock frequency in Hz
0000             11   CCU_RATE    EQU 22050     ; 22050Hz is the sampling rate of the wav file we are playing
0000             12   CCU_RELOAD  EQU ((65536-((CLK/(2*CCU_RATE)))))
0000             13   BAUD        EQU 115200
0000             14   BRVAL       EQU ((CLK/BAUD)-16)
0000             15   XTAL        EQU 7373000
0000             16   
0000             17   LCD_RS equ P0.5
0000             18   LCD_RW equ P0.6
0000             19   LCD_E  equ P0.7
0000             20   LCD_D4 equ P1.2
0000             21   LCD_D5 equ P1.3
0000             22   LCD_D6 equ P1.4
0000             23   LCD_D7 equ P1.6
0000             24   DIP_BUTTON1 equ P3.0
0000             25   PLAY_BUTTON equ P0.3
0000             26   SOUND equ P2.7
0000             27   
0000             28   FLASH_CE    EQU P2.4
0000             29   
0030             30   dseg at 30H
0030             31            w:   ds 3 ; 24-bit play counter.  Decremented in CCU ISR.
0033             32     x:   ds 4
0037             33     y:   ds 4
003B             34     bcd: ds 5
0040             35     sound_start: ds 3
0043             36    
0000             37   bseg
0000             38   
0000             39   mf: dbit 1
0001             40   PB0: dbit 1 ; Variable to store the state of pushbutton 0 after calling ADC_to_PB below
0002             41   PB1: dbit 1 ; Variable to store the state of pushbutton 1 after calling ADC_to_PB below
0003             42   PB2: dbit 1 ; Variable to store the state of pushbutton 2 after calling ADC_to_PB below
0004             43   PB3: dbit 1 ; Variable to store the state of pushbutton 3 after calling ADC_to_PB below
0005             44   PB4: dbit 1 ; Variable to store the state of pushbutton 4 after calling ADC_to_PB below
0006             45   PB5: dbit 1 ; Variable to store the state of pushbutton 5 after calling ADC_to_PB below
0007             46   PB6: dbit 1 ; Variable to store the state of pushbutton 6 after calling ADC_to_PB below
0008             47   
0000             48   cseg
0000             49   
0000             50   org 0x0000 ; Reset vector
0000 0209CD      51       ljmp MainProgram
0003             52   
0003             53   org 0x0003 ; External interrupt 0 vector (not used in this code)
0003 32          54            reti
0004             55   
000B             56   org 0x000B ; Timer/Counter 0 overflow interrupt vector (not used in this code)
000B 32          57            reti
000C             58   
0013             59   org 0x0013 ; External interrupt 1 vector (not used in this code)
0013 32          60            reti
0014             61   
001B             62   org 0x001B ; Timer/Counter 1 overflow interrupt vector (not used in this code
001B 32          63            reti
001C             64   
0023             65   org 0x0023 ; Serial port receive/transmit interrupt vector (not used in this code)
0023 32          66            reti
0024             67   
005B             68   org 0x005b ; CCU interrupt vector.  Used in this code to replay the wave file.
005B 0204D1      69            ljmp CCU_ISR
005E             70   
005E             71   
005E             72   
                546   $LIST
                 77   $LIST
098D             79   
098D             80   ;---------------------------------;
098D             81   ; Initial configuration of ports. ;
098D             82   ; After reset the default for the ;
098D             83   ; pins is 'Open Drain'.  This     ;
098D             84   ; routine changes them pins to    ;
098D             85   ; Quasi-bidirectional like in the ;
098D             86   ; original 8051.                  ;
098D             87   ; Notice that P1.2 and P1.3 are   ;
098D             88   ; always 'Open Drain'. If those   ;
098D             89   ; pins are to be used as output   ;
098D             90   ; they need a pull-up resistor.   ;
098D             91   ;---------------------------------;
098D             92   Ports_Init:
098D             93       ; Configure all the ports in bidirectional mode:
098D 758400      94       mov P0M1, #00H
0990 758500      95       mov P0M2, #00H
0993 759100      96       mov P1M1, #00H
0996 759200      97       mov P1M2, #00H ; WARNING: P1.2 and P1.3 need 1 kohm pull-up resistors if used as outputs!
0999 75A400      98       mov P2M1, #00H
099C 75A500      99       mov P2M2, #00H
099F 75B100     100       mov P3M1, #00H
09A2 75B200     101       mov P3M2, #00H
09A5 22         102            ret
09A6            103   
09A6            104   ; Display a 3-digit BCD number in the LCD
09A6            105   LCD_3BCD:
09A6 E53C       106            mov a, bcd+1
09A8 540F       107            anl a, #0x0f
09AA 4430       108            orl a, #'0'
09AC 12031C     109            lcall ?WriteData
09AF E53B       110            mov a, bcd+0
09B1 C4         111            swap a
09B2 540F       112            anl a, #0x0f
09B4 4430       113            orl a, #'0'
09B6 12031C     114            lcall ?WriteData
09B9 E53B       115            mov a, bcd+0
09BB 540F       116            anl a, #0x0f
09BD 4430       117            orl a, #'0'
09BF 12031C     118            lcall ?WriteData
09C2 22         119            ret
09C3            120   
09C3            121   Sound_Start_Init:
09C3 7540FF     122     mov sound_start+0, #0xff
09C6 754100     123     mov sound_start+1, #0x00
09C9 754200     124     mov sound_start+2, #0x00
09CC 22         125     ret
09CD            126   
09CD            127   MainProgram:
09CD 75817F     128     mov SP, #0x7F
09D0            129     
09D0 1209C3     130     lcall Sound_Start_Init
09D3 12098D     131     lcall Ports_Init ; Default all pins as bidirectional I/O. See Table 42.
09D6 120514     132     lcall Double_Clk
09D9 120504     133     lcall InitDAC ; Call after 'Ports_Init
09DC 1204BA     134            lcall CCU_Init
09DF 12051C     135            lcall Init_SPI
09E2            136     
09E2 120776     137     lcall InitSerialPort
09E5 12078C     138            lcall InitADC0
09E8 120326     139     lcall LCD_4BIT
09EB            140   
09EB            141     ; Set beginning message on LCD
09EB C0E0       142            push acc
09ED 7401       142            mov a, #1
09EF 14         142            dec a
09F0 120368     142            lcall ?Set_Cursor_1 ; Select column and row
09F3 D0E0       142            pop acc
09F5 C083       143            push dph
09F7 C082       143            push dpl
09F9 C0E0       143            push acc
09FB 900878     143            mov dptr, #Title
09FE 12035B     143            lcall ?Send_Constant_String
0A01 D0E0       143            pop acc
0A03 D082       143            pop dpl
0A05 D083       143            pop dph
0A07            144   
0A07 120769     145     lcall Wait1S ; Wait a bit so PUTTy has a chance to start
0A0A            146   
0A0A 90088A     147     mov dptr, #InitialMessage
0A0D 120818     148            lcall SendString
0A10            149   
0A10 C2A7       150     clr SOUND ; Disable speaker
0A12 C2C8       151     clr TMOD20 ; Stop CCU timer
0A14 D2AF       152            setb EA ; Enable global interrupts.
0A16            153   
0A16            154   forever:
0A16 1208D8     155     lcall Read_Temperature
0A19 120823     156     lcall ADC_to_PB
0A1C 120943     157            lcall Display_PushButtons_ADC
0A1F 2083F4     158            jb PLAY_BUTTON, forever
0A22            159     ;Wait_Milli_Seconds(#50)
0A22 2083F1     160     jb PLAY_BUTTON, forever
0A25 3083FD     161     jnb PLAY_BUTTON, $
0A28            162   
0A28 7401       163     mov a, #1
0A2A 12042E     164     lcall Play_Character
0A2D C002       165            push AR2
0A2F 7AFF       165            mov R2, #255
0A31 1202D7     165            lcall ?Wait_Milli_Seconds
0A34 D002       165            pop AR2
0A36 7402       166     mov a, #2
0A38 C002       167            push AR2
0A3A 7AFF       167            mov R2, #255
0A3C 1202D7     167            lcall ?Wait_Milli_Seconds
0A3F D002       167            pop AR2
0A41 7403       168     mov a, #3
0A43 020A16     169     ljmp forever
0A46            170   
0A46            171   en
